name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - build
          - deploy
          - security-scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Тестирование Backend
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: asia
          POSTGRES_PASSWORD: asia
          POSTGRES_DB: asia_crm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8

    - name: 🧹 Code formatting check
      working-directory: ./backend
      run: |
        black --check .
        isort --check-only .

    - name: 🔍 Lint with flake8
      working-directory: ./backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🧪 Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://asia:asia@localhost:5432/asia_crm_test
      run: |
        pytest tests/ -v --cov=app --cov-report=xml

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Тестирование Frontend
  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔍 Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

  # Сканирование безопасности
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.action == 'security-scan'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    # Сканирование Python зависимостей
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔒 Python Security Scan
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: 📤 Upload Python Security Report
      uses: actions/upload-artifact@v3
      with:
        name: python-security-report
        path: backend/safety-report.json

    # Сканирование Node.js зависимостей
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔒 Node.js Security Scan
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > audit-report.json || true

    - name: 📤 Upload Node.js Security Report
      uses: actions/upload-artifact@v3
      with:
        name: nodejs-security-report
        path: frontend/audit-report.json

    # Сканирование Docker образов (если есть образы)
    - name: 🐳 Docker Security Scan
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}-backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Docker Security Report
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Сборка и публикация Docker образов
  build-and-push:
    name: 🐳 Build & Push
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.action == 'build'
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    # Сборка Backend образа
    - name: 🏗️ Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Сборка Frontend образа
    - name: 🏗️ Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Деплой в Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.action == 'deploy'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Здесь будет команда деплоя на staging сервер
        echo "Staging deployment completed"

  # Деплой в Production
  deploy-production:
    name: 🚀 Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Здесь будет команда деплоя на production сервер
        echo "Production deployment completed"

  # Уведомления
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, build-and-push]
    if: always()

    steps:
    - name: 📢 Send notification
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed!"
        fi
