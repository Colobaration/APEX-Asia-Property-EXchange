name: DevLoop - APEX Admin Panel

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'admin_panel/**'
      - 'docker-compose*.yml'
      - '.github/workflows/devloop.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'admin_panel/**'
      - 'docker-compose*.yml'
  schedule:
    # Ежедневная проверка в 9:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - build
          - deploy
          - security-scan
          - backup

env:
  PYTHON_VERSION: '3.11'
  DJANGO_SETTINGS_MODULE: 'apex_admin.settings'
  DOCKER_COMPOSE_FILE: 'docker-compose.staging.yml'

jobs:
  # Проверка кода
  lint:
    name: 🔍 Lint & Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install dependencies
        run: |
          cd admin_panel
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety
          
      - name: 🧹 Code formatting check
        run: |
          cd admin_panel
          black --check .
          isort --check-only .
          
      - name: 🔍 Lint with flake8
        run: |
          cd admin_panel
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          
      - name: 🛡️ Security scan
        run: |
          cd admin_panel
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

  # Тестирование
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        django-version: ['4.2.7']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: 📦 Install dependencies
        run: |
          cd admin_panel
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django
          
      - name: 🗄️ Setup database
        run: |
          cd admin_panel
          python manage.py migrate --run-syncdb
          
      - name: 🧪 Run tests with coverage
        run: |
          cd admin_panel
          coverage run --source='.' manage.py test tests -v 2
          coverage report
          coverage xml
          
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./admin_panel/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Сборка Docker образа
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.action == 'build'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./admin_panel
          file: ./admin_panel/Dockerfile
          push: true
          tags: |
            apex-asia/admin-panel:latest
            apex-asia/admin-panel:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Деплой в staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.action == 'deploy'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Здесь будет команда деплоя на staging сервер
          echo "Staging deployment completed"

  # Деплой в production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Здесь будет команда деплоя на production сервер
          echo "Production deployment completed"

  # Сканирование безопасности
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'security-scan'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install security tools
        run: |
          pip install bandit safety trivy-python-plugin
          
      - name: 🔍 Run Bandit
        run: |
          cd admin_panel
          bandit -r . -f json -o bandit-report.json
          
      - name: 🔒 Run Safety check
        run: |
          cd admin_panel
          safety check --json --output safety-report.json
          
      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            admin_panel/bandit-report.json
            admin_panel/safety-report.json

  # Резервное копирование
  backup:
    name: 💾 Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'backup'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 💾 Create backup
        run: |
          echo "Creating backup..."
          # Здесь будет логика резервного копирования
          echo "Backup completed"

  # Мониторинг
  monitor:
    name: 📊 Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Health check
        run: |
          echo "Running health checks..."
          # Здесь будут проверки здоровья системы
          echo "Health checks completed"

  # Уведомления
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
      - name: 📢 Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#apex-dev'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 📱 Send Telegram notification
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed!"
          fi
