# APEX Asia Property Exchange - Makefile

.PHONY: help install dev test clean docker-up docker-down logs

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON_VERSION := 3.11
NODE_VERSION := 18

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "APEX Asia Property Exchange - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	cd backend && python -m pip install -r requirements.txt
	cd frontend && npm install

dev: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	docker-compose -f docker-compose.local.yml up -d

staging: ## –ó–∞–ø—É—Å–∫ staging –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üöÄ –ó–∞–ø—É—Å–∫ staging –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	docker-compose -f docker-compose.staging.yml up -d

prod: ## –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üöÄ –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	docker-compose -f docker-compose.prod.yml up -d

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose down

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	@echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
	docker-compose logs -f

test: ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	cd backend && pytest tests/ -v
	cd frontend && npm test

test-backend: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend..."
	cd backend && pytest tests/ -v

test-frontend: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend..."
	cd frontend && npm test

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞..."
	cd backend && black . && isort . && flake8 .
	cd frontend && npm run lint

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	cd backend && black . && isort .
	cd frontend && npm run format

clean: ## –û—á–∏—Å—Ç–∫–∞
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	docker-compose down -v
	docker system prune -f
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
	@echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
	docker-compose build

deploy-staging: ## –î–µ–ø–ª–æ–π –≤ staging
	@echo "üöÄ –î–µ–ø–ª–æ–π –≤ staging..."
	./scripts/deploy.sh staging

deploy-production: ## –î–µ–ø–ª–æ–π –≤ production
	@echo "üöÄ –î–µ–ø–ª–æ–π –≤ production..."
	./scripts/deploy.sh production

migrate: ## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	cd backend && alembic upgrade head

migrate-create: ## –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
	@echo "üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏..."
	cd backend && alembic revision --autogenerate -m "$(message)"

shell: ## –ó–∞–ø—É—Å–∫ shell
	@echo "üêç –ó–∞–ø—É—Å–∫ shell..."
	cd backend && python -c "from app.main import app; import uvicorn; uvicorn.run(app, host='0.0.0.0', port=8000)"

status: ## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose ps

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose restart

backup: ## –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
	docker-compose exec db pg_dump -U asia asia_crm > backup_$(shell date +%Y%m%d_%H%M%S).sql

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
	docker-compose exec -T db psql -U asia asia_crm < $(file)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-backend: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ backend
	@echo "üîß –ó–∞–ø—É—Å–∫ backend..."
	cd backend && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

dev-frontend: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ frontend
	@echo "üåê –ó–∞–ø—É—Å–∫ frontend..."
	cd frontend && npm run dev

dev-admin: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ admin panel
	@echo "üìä –ó–∞–ø—É—Å–∫ admin panel..."
	cd admin_panel && python manage.py runserver 0.0.0.0:8001

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤..."
	docker stats

health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
	curl -f http://localhost:8000/health || echo "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	curl -f http://localhost:3000 || echo "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	curl -f http://localhost:8001 || echo "Admin panel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security-check: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	@echo "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
	cd backend && safety check
	cd frontend && npm audit

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
docs: ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	cd backend && pydoc-markdown
	cd frontend && npm run docs

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
ci: ## –ó–∞–ø—É—Å–∫ CI –ø—Ä–æ–≤–µ—Ä–æ–∫
	@echo "üîç –ó–∞–ø—É—Å–∫ CI –ø—Ä–æ–≤–µ—Ä–æ–∫..."
	make lint
	make test
	make security-check

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug: ## –û—Ç–ª–∞–¥–∫–∞
	@echo "üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏..."
	docker-compose -f docker-compose.local.yml up -d
	docker-compose logs -f

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
reset-db: ## –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "üóÑÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	docker-compose down -v
	docker-compose up -d db
	sleep 10
	make migrate

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update-deps: ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	cd backend && pip install --upgrade -r requirements.txt
	cd frontend && npm update

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
optimize: ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
	@echo "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..."
	docker system prune -f
	docker image prune -f
	npm cache clean --force

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export-data: ## –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
	@echo "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."
	docker-compose exec db pg_dump -U asia asia_crm > export_$(shell date +%Y%m%d_%H%M%S).sql

import-data: ## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
	@echo "üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."
	docker-compose exec -T db psql -U asia asia_crm < $(file)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git
git-status: ## –°—Ç–∞—Ç—É—Å Git
	@echo "üìã –°—Ç–∞—Ç—É—Å Git..."
	git status

git-pull: ## Pull –∏–∑–º–µ–Ω–µ–Ω–∏–π
	@echo "üì• Pull –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	git pull origin main

git-push: ## Push –∏–∑–º–µ–Ω–µ–Ω–∏–π
	@echo "üì§ Push –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	git push origin main

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env-check: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@if [ -f .env ]; then echo "‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"; else echo "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"; fi

env-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@if [ ! -f .env ]; then cp env.example .env; echo "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"; else echo "‚ö†Ô∏è .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; fi

