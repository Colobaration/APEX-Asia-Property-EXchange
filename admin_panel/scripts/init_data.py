#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import os
import sys
import django
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'apex_admin.settings')
django.setup()

from django.contrib.auth.models import User
from landings.models import Landing, LandingAnalytics
from integrations.models import APIIntegration, IntegrationLog, WebhookEvent
from analytics.models import Dashboard, Metric, DashboardMetric, Report, ReportExecution, AnalyticsEvent
from logs.models import SystemLog, NotificationTemplate, NotificationLog, SecurityLog


def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'admin@example.com',
            'is_staff': True,
            'is_superuser': True
        }
    )
    if created:
        user.set_password('admin123')
        user.save()
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
    print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤...")
    
    landings_data = [
        {
            'name': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'slug': 'main',
            'domain': 'https://apex-asia.com',
            'status': 'active',
            'theme': 'modern',
            'utm_source': 'direct',
            'utm_medium': 'organic',
            'utm_campaign': 'main_page'
        },
        {
            'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
            'slug': 'product',
            'domain': 'https://apex-asia.com/product',
            'status': 'active',
            'theme': 'professional',
            'utm_source': 'google',
            'utm_medium': 'cpc',
            'utm_campaign': 'product_launch'
        },
        {
            'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
            'slug': 'docs',
            'domain': 'https://apex-asia.com/docs',
            'status': 'active',
            'theme': 'documentation',
            'utm_source': 'organic',
            'utm_medium': 'search',
            'utm_campaign': 'documentation'
        }
    ]
    
    for landing_data in landings_data:
        landing, created = Landing.objects.get_or_create(
            slug=landing_data['slug'],
            defaults={**landing_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ª–µ–Ω–¥–∏–Ω–≥: {landing.name}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    print("üîó –°–æ–∑–¥–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    integrations_data = [
        {
            'name': 'AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
            'integration_type': 'amocrm',
            'status': 'active',
            'api_key': 'amocrm_key_123',
            'api_secret': 'amocrm_secret_456',
            'webhook_url': 'https://api.apex-asia.com/webhooks/amocrm/',
            'auto_sync': True,
            'sync_interval': 300
        },
        {
            'name': 'WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'integration_type': 'whatsapp',
            'status': 'active',
            'api_key': 'whatsapp_key_789',
            'api_secret': 'whatsapp_secret_012',
            'webhook_url': 'https://api.apex-asia.com/webhooks/whatsapp/',
            'auto_sync': True,
            'sync_interval': 60
        },
        {
            'name': 'Telegram Bot',
            'integration_type': 'telegram',
            'status': 'active',
            'api_key': 'telegram_bot_token_345',
            'webhook_url': 'https://api.apex-asia.com/webhooks/telegram/',
            'auto_sync': True,
            'sync_interval': 30
        }
    ]
    
    for integration_data in integrations_data:
        integration, created = APIIntegration.objects.get_or_create(
            name=integration_data['name'],
            defaults={**integration_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration.name}")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤...")
    
    dashboards_data = [
        {
            'name': '–û–±—â–∏–π –æ–±–∑–æ—Ä',
            'description': '–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            'is_public': True,
            'refresh_interval': 300
        },
        {
            'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'description': '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'is_public': True,
            'refresh_interval': 600
        },
        {
            'name': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤',
            'is_public': False,
            'refresh_interval': 60
        }
    ]
    
    for dashboard_data in dashboards_data:
        dashboard, created = Dashboard.objects.get_or_create(
            name=dashboard_data['name'],
            defaults={**dashboard_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –¥–∞—à–±–æ—Ä–¥: {dashboard.name}")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
    
    metrics_data = [
        {
            'name': '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'description': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'metric_type': 'counter',
            'data_source': 'users',
            'unit': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        },
        {
            'name': '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
            'description': '–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π',
            'metric_type': 'percentage',
            'data_source': 'landings',
            'unit': '%'
        },
        {
            'name': '–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API',
            'description': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API',
            'metric_type': 'duration',
            'data_source': 'api',
            'unit': '–º—Å'
        },
        {
            'name': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫',
            'description': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ',
            'metric_type': 'counter',
            'data_source': 'logs',
            'unit': '–æ—à–∏–±–∫–∏'
        }
    ]
    
    for metric_data in metrics_data:
        metric, created = Metric.objects.get_or_create(
            name=metric_data['name'],
            defaults={**metric_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞: {metric.name}")
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    print("üìß –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    templates_data = [
        {
            'name': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'template_type': 'email',
            'subject': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!',
            'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{user_name}}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É.',
            'is_active': True
        },
        {
            'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
            'template_type': 'telegram',
            'subject': 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
            'content': '–í–ù–ò–ú–ê–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: {{error_message}}',
            'is_active': True
        },
        {
            'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
            'template_type': 'email',
            'subject': 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {{date}}',
            'content': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {{active_users}}',
            'is_active': True
        }
    ]
    
    for template_data in templates_data:
        template, created = NotificationTemplate.objects.get_or_create(
            name=template_data['name'],
            defaults={**template_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: {template.name}")
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...")
    
    logs_data = [
        {
            'level': 'INFO',
            'log_type': 'system',
            'source': 'initialization',
            'message': '–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
            'data': {'status': 'success'}
        },
        {
            'level': 'INFO',
            'log_type': 'integration',
            'source': 'amocrm',
            'message': 'AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞',
            'data': {'integration': 'amocrm', 'status': 'active'}
        },
        {
            'level': 'WARNING',
            'log_type': 'security',
            'source': 'ssl',
            'message': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
            'data': {'priority': 'medium'}
        }
    ]
    
    for log_data in logs_data:
        log = SystemLog.objects.create(**log_data)
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ª–æ–≥: {log.message[:50]}...")
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤...")
    
    landings = Landing.objects.all()
    for landing in landings:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        for i in range(7):
            date = datetime.now().date() - timedelta(days=i)
            analytics, created = LandingAnalytics.objects.get_or_create(
                landing=landing,
                date=date,
                defaults={
                    'visitors': 100 + (i * 20),
                    'unique_visitors': 80 + (i * 15),
                    'conversions': 5 + (i * 2),
                    'leads': 3 + i,
                    'avg_session_duration': 180 + (i * 10),
                    'bounce_rate': 45.0 - (i * 1.5),
                    'organic_traffic': 60,
                    'paid_traffic': 20,
                    'direct_traffic': 15,
                    'referral_traffic': 5
                }
            )
            if created:
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {landing.name} –Ω–∞ {date}")
    
    # 8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...")
    
    reports_data = [
        {
            'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
            'description': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã',
            'report_type': 'daily',
            'is_scheduled': True,
            'schedule_cron': '0 9 * * *'
        },
        {
            'name': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç',
            'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
            'report_type': 'weekly',
            'is_scheduled': True,
            'schedule_cron': '0 10 * * 1'
        }
    ]
    
    for report_data in reports_data:
        report, created = Report.objects.get_or_create(
            name=report_data['name'],
            defaults={**report_data, 'created_by': user}
        )
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: {report.name}")
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–æ–∑–¥–∞–Ω–æ:")
    print(f"  - –õ–µ–Ω–¥–∏–Ω–≥–æ–≤: {Landing.objects.count()}")
    print(f"  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {APIIntegration.objects.count()}")
    print(f"  - –î–∞—à–±–æ—Ä–¥–æ–≤: {Dashboard.objects.count()}")
    print(f"  - –ú–µ—Ç—Ä–∏–∫: {Metric.objects.count()}")
    print(f"  - –®–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {NotificationTemplate.objects.count()}")
    print(f"  - –°–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤: {SystemLog.objects.count()}")
    print(f"  - –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤: {LandingAnalytics.objects.count()}")
    print(f"  - –û—Ç—á–µ—Ç–æ–≤: {Report.objects.count()}")
    
    print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8002/admin/")
    print("üë§ –õ–æ–≥–∏–Ω: admin / –ü–∞—Ä–æ–ª—å: admin123")


if __name__ == '__main__':
    create_sample_data()
