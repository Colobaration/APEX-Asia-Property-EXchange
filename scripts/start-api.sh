#!/bin/bash

# APEX Asia Property Exchange - Full Stack Startup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_service() {
    echo -e "${PURPLE}[SERVICE]${NC} $1"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT=${1:-development}
COMPOSE_FILE="docker-compose.yml"

case $ENVIRONMENT in
    "staging")
        COMPOSE_FILE="docker-compose.staging.yml"
        ENV_FILE=".env.staging"
        ;;
    "production")
        COMPOSE_FILE="docker-compose.prod.yml"
        ENV_FILE=".env.production"
        ;;
    "local")
        COMPOSE_FILE="docker-compose.local.yml"
        ENV_FILE=".env"
        ;;
    *)
        COMPOSE_FILE="docker-compose.yml"
        ENV_FILE=".env"
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
check_env_file() {
    if [ ! -f "$ENV_FILE" ]; then
        log_error "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        log_info "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª $ENV_FILE –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example"
        exit 1
    fi
    log_success "–§–∞–π–ª $ENV_FILE –Ω–∞–π–¥–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
    
    log_success "Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    log_success "Docker Compose –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing_containers() {
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose -f $COMPOSE_FILE down --remove-orphans || true
    log_success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    log_service "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
    log_service "Compose —Ñ–∞–π–ª: $COMPOSE_FILE"
    
    docker-compose -f $COMPOSE_FILE up -d
    
    log_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 15
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker-compose -f $COMPOSE_FILE exec -T db pg_isready -U asia > /dev/null 2>&1; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≥–æ—Ç–æ–≤–∞"
    else
        log_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤–∞"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker-compose -f $COMPOSE_FILE exec -T redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis –≥–æ—Ç–æ–≤"
    else
        log_error "Redis –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            log_success "API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤"
            break
        fi
        
        log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
            log_success "Frontend –≥–æ—Ç–æ–≤"
            break
        fi
        
        log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Frontend... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_warning "Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Metabase (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if docker-compose -f $COMPOSE_FILE ps | grep -q metabase; then
        attempt=1
        while [ $attempt -le 20 ]; do
            if curl -f http://localhost:3001 > /dev/null 2>&1; then
                log_success "Metabase –≥–æ—Ç–æ–≤"
                break
            fi
            
            log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Metabase... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/20)"
            sleep 5
            attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt 20 ]; then
            log_warning "Metabase –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        fi
    fi
    
    return 0
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ endpoints
show_endpoints_info() {
    log_info "=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö ==="
    echo
    echo "üåê Frontend:"
    echo "   ‚Ä¢ Web App: http://localhost:3000"
    echo
    echo "üîß Backend API:"
    echo "   ‚Ä¢ API Docs: http://localhost:8000/docs"
    echo "   ‚Ä¢ Health Check: http://localhost:8000/health"
    echo "   ‚Ä¢ Root: http://localhost:8000/"
    echo
    echo "üîó API Endpoints:"
    echo "   ‚Ä¢ Webhooks: http://localhost:8000/api/webhooks"
    echo "   ‚Ä¢ Auth: http://localhost:8000/api/auth"
    echo "   ‚Ä¢ Leads: http://localhost:8000/api/leads"
    echo "   ‚Ä¢ Analytics: http://localhost:8000/api/analytics"
    echo "   ‚Ä¢ Notifications: http://localhost:8000/api/notifications"
    echo
    echo "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:"
    echo "   ‚Ä¢ Metabase: http://localhost:3001"
    echo
    echo "üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
    echo "   ‚Ä¢ PostgreSQL: localhost:${DB_PORT:-5432}"
    echo "   ‚Ä¢ Redis: localhost:${REDIS_PORT:-6379}"
    echo
    echo "üåç –ü—Ä–æ–∫—Å–∏:"
    echo "   ‚Ä¢ Nginx: http://localhost:${NGINX_PORT:-80}"
    echo
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   ‚Ä¢ –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f $COMPOSE_FILE logs -f"
    echo "   ‚Ä¢ –õ–æ–≥–∏ backend: docker-compose -f $COMPOSE_FILE logs -f backend"
    echo "   ‚Ä¢ –õ–æ–≥–∏ frontend: docker-compose -f $COMPOSE_FILE logs -f frontend"
    echo
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f $COMPOSE_FILE logs -f
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
show_service_logs() {
    local service=$1
    log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: $service"
    docker-compose -f $COMPOSE_FILE logs -f $service
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ APEX Asia Property Exchange - Full Stack Startup"
    echo "=================================================="
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_env_file
    check_docker
    check_docker_compose
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    stop_existing_containers
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if check_services_status; then
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
        echo
        show_endpoints_info
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–∫–∞–∑–µ –ª–æ–≥–æ–≤
        echo
        read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            show_logs
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f $COMPOSE_FILE logs"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${2:-}" in
    "stop")
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
        docker-compose -f $COMPOSE_FILE down
        log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
    "restart")
        log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
        docker-compose -f $COMPOSE_FILE restart
        log_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        ;;
    "logs")
        show_logs
        ;;
    "backend")
        show_service_logs "backend"
        ;;
    "frontend")
        show_service_logs "frontend"
        ;;
    "db")
        show_service_logs "db"
        ;;
    "redis")
        show_service_logs "redis"
        ;;
    "metabase")
        show_service_logs "metabase"
        ;;
    "status")
        docker-compose -f $COMPOSE_FILE ps
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–∫—Ä—É–∂–µ–Ω–∏–µ] [–∫–æ–º–∞–Ω–¥–∞]"
        echo
        echo "–û–∫—Ä—É–∂–µ–Ω–∏—è:"
        echo "  development (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - docker-compose.yml"
        echo "  staging                    - docker-compose.staging.yml"
        echo "  production                 - docker-compose.prod.yml"
        echo "  local                      - docker-compose.local.yml"
        echo
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫"
        echo "  stop             - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo "  restart          - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo "  logs             - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  backend          - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend"
        echo "  frontend         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend"
        echo "  db               - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        echo "  redis            - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Redis"
        echo "  metabase         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Metabase"
        echo "  status           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  help             - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å development –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo "  $0 staging            # –ó–∞–ø—É—Å—Ç–∏—Ç—å staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo "  $0 staging logs       # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ staging"
        echo "  $0 production stop    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production"
        ;;
    *)
        main
        ;;
esac
