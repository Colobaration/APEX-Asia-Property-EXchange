#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM
"""

import asyncio
import httpx
import json
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
AMO_AUTH_URL = f"{BASE_URL}/api/auth/amo"
AMO_STATUS_URL = f"{BASE_URL}/api/auth/amo/status"
AMO_TEST_URL = f"{BASE_URL}/api/auth/amo/test"
LEADS_URL = f"{BASE_URL}/api/leads"
WEBHOOK_TEST_URL = f"{BASE_URL}/api/webhooks/amo/test"

async def test_amo_auth_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM...")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(AMO_STATUS_URL)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("authorized"):
                    print("‚úÖ amoCRM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    print(f"   Account ID: {data.get('account_id')}")
                    print(f"   Scope: {data.get('scope')}")
                else:
                    print("‚ùå amoCRM –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    print("   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                    print(f"   {AMO_AUTH_URL}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return None

async def test_amo_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ amoCRM"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ amoCRM...")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(AMO_TEST_URL)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "success":
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ amoCRM —É—Å–ø–µ—à–Ω–æ")
                    if data.get("account_info"):
                        account = data["account_info"]
                        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {account.get('name')}")
                        print(f"   –î–æ–º–µ–Ω: {account.get('subdomain')}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ amoCRM")
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return None

async def test_create_lead():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞...")
    
    lead_data = {
        "name": "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
        "phone": "+79001234567",
        "email": "test@example.com",
        "utm_source": "google",
        "utm_medium": "cpc",
        "utm_campaign": "asia_deals_test",
        "property_type": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
        "budget": 5000000,
        "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                LEADS_URL,
                json=lead_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                print(f"   ID: {data.get('id')}")
                print(f"   amoCRM Contact ID: {data.get('amocrm_contact_id')}")
                print(f"   amoCRM Lead ID: {data.get('amocrm_lead_id')}")
                print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {str(e)}")
        return None

async def test_get_leads():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤...")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(LEADS_URL)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ª–∏–¥–æ–≤")
                for lead in data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   - {lead.get('name')} ({lead.get('status')})")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤: {response.status_code}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤: {str(e)}")
        return None

async def test_webhook():
    """–¢–µ—Å—Ç webhook endpoint"""
    print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(WEBHOOK_TEST_URL)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ webhook endpoint: {response.status_code}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook: {str(e)}")
        return None

async def test_lead_status_update(lead_id: int):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞"""
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞ {lead_id}...")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.put(
                f"{LEADS_URL}/{lead_id}/status",
                params={"status": "contacted"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_status = await test_amo_auth_status()
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ amoCRM
    connection_test = await test_amo_connection()
    
    # –¢–µ—Å—Ç 3: Webhook endpoint
    webhook_test = await test_webhook()
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if auth_status and auth_status.get("authorized"):
        lead = await test_create_lead()
        
        if lead:
            # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤
            await test_get_leads()
            
            # –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞
            await test_lead_status_update(lead["id"])
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤ - amoCRM –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        print("   –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:")
        print(f"   {AMO_AUTH_URL}")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if not auth_status or not auth_status.get("authorized"):
        print("1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ amoCRM")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    else:
        print("1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("2. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏–¥–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        print("3. Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    asyncio.run(main())
