#!/bin/bash

# APEX Asia Property Exchange - API Testing Script
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_test() {
    echo -e "${PURPLE}[TEST]${NC} $1"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL=${1:-"http://localhost:8001"}
WAIT_TIME=${2:-5}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ curl
check_curl() {
    if ! command -v curl &> /dev/null; then
        log_error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    log_success "curl –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API
wait_for_api() {
    log_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞..."
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$API_BASE_URL/health" > /dev/null 2>&1; then
            log_success "API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤!"
            return 0
        fi
        
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - API –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log_error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    return 1
}

# –¢–µ—Å—Ç health check
test_health() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Health Check endpoint..."
    
    local response=$(curl -s "$API_BASE_URL/health")
    local status=$(echo "$response" | jq -r '.status' 2>/dev/null || echo "unknown")
    
    if [ "$status" = "healthy" ]; then
        log_success "Health Check: ‚úÖ $status"
        echo "Response: $response"
    else
        log_error "Health Check: ‚ùå $status"
        echo "Response: $response"
    fi
}

# –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint
test_root() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π endpoint..."
    
    local response=$(curl -s "$API_BASE_URL/")
    local message=$(echo "$response" | jq -r '.message' 2>/dev/null || echo "unknown")
    
    if [ "$message" = "APEX Asia Property Exchange API" ]; then
        log_success "Root endpoint: ‚úÖ $message"
        echo "Response: $response"
    else
        log_error "Root endpoint: ‚ùå $message"
        echo "Response: $response"
    fi
}

# –¢–µ—Å—Ç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
test_docs() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/docs")
    
    if [ "$response" = "200" ]; then
        log_success "API Docs: ‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã (HTTP $response)"
        echo "URL: $API_BASE_URL/docs"
    else
        log_warning "API Docs: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç webhooks endpoint
test_webhooks() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Webhooks endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/webhooks")
    
    if [ "$response" = "200" ] || [ "$response" = "405" ]; then
        log_success "Webhooks endpoint: ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
    else
        log_warning "Webhooks endpoint: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç auth endpoint
test_auth() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Auth endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/auth")
    
    if [ "$response" = "200" ] || [ "$response" = "405" ]; then
        log_success "Auth endpoint: ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
    else
        log_warning "Auth endpoint: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç leads endpoint
test_leads() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Leads endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/leads")
    
    if [ "$response" = "200" ] || [ "$response" = "405" ]; then
        log_success "Leads endpoint: ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
    else
        log_warning "Leads endpoint: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç analytics endpoint
test_analytics() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Analytics endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/analytics")
    
    if [ "$response" = "200" ] || [ "$response" = "405" ]; then
        log_success "Analytics endpoint: ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
    else
        log_warning "Analytics endpoint: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç notifications endpoint
test_notifications() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º Notifications endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/notifications")
    
    if [ "$response" = "200" ] || [ "$response" = "405" ]; then
        log_success "Notifications endpoint: ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
    else
        log_warning "Notifications endpoint: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç amoCRM webhook
test_amocrm_webhook() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º amoCRM webhook..."
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
    local webhook_data='{
        "leads": {
            "add": [{
                "id": 12345,
                "name": "Test Lead",
                "status_id": 1,
                "price": 100000,
                "created_at": 1234567890
            }]
        }
    }'
    
    local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "X-AmoCRM-Signature: test-signature" \
        -d "$webhook_data" \
        -o /dev/null -w "%{http_code}" \
        "$API_BASE_URL/api/webhooks/amocrm")
    
    if [ "$response" = "200" ] || [ "$response" = "201" ]; then
        log_success "amoCRM webhook: ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (HTTP $response)"
    else
        log_warning "amoCRM webhook: ‚ö†Ô∏è HTTP $response"
    fi
}

# –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
test_create_lead() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞..."
    
    local lead_data='{
        "name": "Test Lead API",
        "email": "test@example.com",
        "phone": "+1234567890",
        "source": "api_test",
        "description": "Test lead created via API"
    }'
    
    local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$lead_data" \
        "$API_BASE_URL/api/leads/")
    
    local status=$(echo "$response" | jq -r '.status' 2>/dev/null || echo "unknown")
    
    if [ "$status" = "success" ] || [ "$status" = "created" ]; then
        log_success "Create Lead: ‚úÖ $status"
        echo "Response: $response"
    else
        log_warning "Create Lead: ‚ö†Ô∏è $status"
        echo "Response: $response"
    fi
}

# –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤
test_get_leads() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤..."
    
    local response=$(curl -s "$API_BASE_URL/api/leads/")
    local status=$(echo "$response" | jq -r '.status' 2>/dev/null || echo "unknown")
    
    if [ "$status" = "success" ] || [ "$status" = "ok" ]; then
        log_success "Get Leads: ‚úÖ $status"
        echo "Response: $response"
    else
        log_warning "Get Leads: ‚ö†Ô∏è $status"
        echo "Response: $response"
    fi
}

# –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
test_analytics_data() {
    log_test "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É..."
    
    local response=$(curl -s "$API_BASE_URL/api/analytics/overview")
    local status=$(echo "$response" | jq -r '.status' 2>/dev/null || echo "unknown")
    
    if [ "$status" = "success" ] || [ "$status" = "ok" ]; then
        log_success "Analytics: ‚úÖ $status"
        echo "Response: $response"
    else
        log_warning "Analytics: ‚ö†Ô∏è $status"
        echo "Response: $response"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    echo "üß™ APEX Asia Property Exchange - API Testing"
    echo "============================================"
    echo
    
    log_info "API Base URL: $API_BASE_URL"
    log_info "Wait Time: $WAIT_TIME seconds"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_curl
    
    # –û–∂–∏–¥–∞–Ω–∏–µ API
    if ! wait_for_api; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ API"
        exit 1
    fi
    
    echo
    log_info "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."
    echo
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    test_health
    echo
    
    test_root
    echo
    
    test_docs
    echo
    
    # API endpoints —Ç–µ—Å—Ç—ã
    test_webhooks
    test_auth
    test_leads
    test_analytics
    test_notifications
    echo
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_amocrm_webhook
    echo
    
    test_create_lead
    echo
    
    test_get_leads
    echo
    
    test_analytics_data
    echo
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    echo "============================================"
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo
    log_info "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  ‚Ä¢ API Docs: $API_BASE_URL/docs"
    echo "  ‚Ä¢ Health Check: $API_BASE_URL/health"
    echo "  ‚Ä¢ Swagger UI: $API_BASE_URL/docs"
    echo "  ‚Ä¢ ReDoc: $API_BASE_URL/redoc"
    echo
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [API_BASE_URL] [WAIT_TIME]"
        echo
        echo "–ê—Ä–≥—É–º–µ–Ω—Ç—ã:"
        echo "  API_BASE_URL  - –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8001)"
        echo "  WAIT_TIME     - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)"
        echo
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0                                    # –¢–µ—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        echo "  $0 http://localhost:8001 10          # –ö–∞—Å—Ç–æ–º–Ω—ã–π URL –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        echo "  $0 http://staging.apex-asia.com      # –¢–µ—Å—Ç staging –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        ;;
    *)
        main
        ;;
esac
