#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM
"""

import asyncio
import httpx
import json
from typing import Dict, Any

class IntegrationTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = httpx.AsyncClient()
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = await self.client.get(f"{self.base_url}/health")
            if response.status_code == 200:
                print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False
    
    async def test_amo_auth_status(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM"""
        try:
            response = await self.client.get(f"{self.base_url}/api/auth/amo/status")
            print(f"üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    async def test_create_lead(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞"""
        try:
            lead_data = {
                "name": "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
                "phone": "+79001234567",
                "email": "test@example.com",
                "utm_source": "google",
                "utm_medium": "cpc",
                "utm_campaign": "asia_deals_test",
                "utm_content": "banner_1",
                "utm_term": "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∞–∑–∏–∏"
            }
            
            response = await self.client.post(
                f"{self.base_url}/api/leads/",
                json=lead_data,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   –°–æ–∑–¥–∞–Ω –ª–∏–¥ ID: {data.get('id')}")
                print(f"   amoCRM Contact ID: {data.get('amocrm_contact_id')}")
                print(f"   amoCRM Lead ID: {data.get('amocrm_lead_id')}")
                return True
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {str(e)}")
            return False
    
    async def test_webhook(self) -> bool:
        """–¢–µ—Å—Ç webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            webhook_data = {
                "leads": {
                    "add": [
                        {
                            "id": 123,
                            "name": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞",
                            "status_id": 1,
                            "price": 50000
                        }
                    ]
                },
                "contacts": {
                    "add": [
                        {
                            "id": 456,
                            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
                            "phone": "+79001234567"
                        }
                    ]
                }
            }
            
            response = await self.client.post(
                f"{self.base_url}/api/webhooks/amo",
                json=webhook_data,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üîó Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {data}")
                return True
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {str(e)}")
            return False
    
    async def test_analytics(self) -> bool:
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoints"""
        try:
            # –¢–µ—Å—Ç CPL
            response = await self.client.get(
                f"{self.base_url}/api/analytics/cpl",
                params={
                    "start_date": "2024-01-01",
                    "end_date": "2024-01-31",
                    "utm_source": "google"
                }
            )
            
            print(f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ CPL: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   CPL: {data.get('value', 'N/A')}")
                return True
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM")
        print("=" * 50)
        
        tests = [
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", self.test_connection),
            ("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ amoCRM", self.test_amo_auth_status),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞", self.test_create_lead),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook", self.test_webhook),
            ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", self.test_analytics),
        ]
        
        results = []
        
        for test_name, test_func in tests:
            print(f"\nüß™ {test_name}:")
            try:
                result = await test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {str(e)}")
                results.append((test_name, False))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print("=" * 50)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status} - {test_name}")
            if result:
                passed += 1
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        await self.client.aclose()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
